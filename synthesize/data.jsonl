{"index": 5, "generated_code": "pub fn main() {\n    let x = Some(1);\n    let Some(y) = x;\n    println!(\"{}\", y);\n}", "error": "error[E0005]: refutable pattern in local binding: `None` not covered\n   --> main.rs:3:9\n    |\n3   |     let Some(y) = x;\n    |         ^^^^^^^ pattern `None` not covered\n    |\n    = note: `let` bindings require an \"irrefutable pattern\", like a `struct` or an `enum` with only one variant\n    = note: for more information, visit https://doc.rust-lang.org/book/ch18-02-refutability.html\nnote: `Option<i32>` defined here\n   --> C:\\Users\\13786\\.rustup\\toolchains\\stable-x86_64-pc-windows-msvc\\lib/rustlib/src/rust\\library\\core\\src\\option.rs:522:5\n    |\n518 | pub enum Option<T> {\n    | ------------------\n...\n522 |     None,\n    |     ^^^^ not covered\n    = note: the matched value is of type `Option<i32>`\nhelp: you might want to use `if let` to ignore the variant that isn't matched\n    |\n3   |     let y = if let Some(y) = x { y } else { todo!() };\n    |     ++++++++++                 ++++++++++++++++++++++\n\nerror: aborting due to previous error", "right_code": "pub fn main() {\n    let x = Some(1);\n    if let Some(y) = x {\n        println!(\"{}\", y);\n    }\n}"}
